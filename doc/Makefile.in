# Makefile.in generated by automake 1.16.5 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = doc
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/version.texi \
	$(srcdir)/stamp-vti $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
AM_V_DVIPS = $(am__v_DVIPS_@AM_V@)
am__v_DVIPS_ = $(am__v_DVIPS_@AM_DEFAULT_V@)
am__v_DVIPS_0 = @echo "  DVIPS   " $@;
am__v_DVIPS_1 = 
AM_V_MAKEINFO = $(am__v_MAKEINFO_@AM_V@)
am__v_MAKEINFO_ = $(am__v_MAKEINFO_@AM_DEFAULT_V@)
am__v_MAKEINFO_0 = @echo "  MAKEINFO" $@;
am__v_MAKEINFO_1 = 
AM_V_INFOHTML = $(am__v_INFOHTML_@AM_V@)
am__v_INFOHTML_ = $(am__v_INFOHTML_@AM_DEFAULT_V@)
am__v_INFOHTML_0 = @echo "  INFOHTML" $@;
am__v_INFOHTML_1 = 
AM_V_TEXI2DVI = $(am__v_TEXI2DVI_@AM_V@)
am__v_TEXI2DVI_ = $(am__v_TEXI2DVI_@AM_DEFAULT_V@)
am__v_TEXI2DVI_0 = @echo "  TEXI2DVI" $@;
am__v_TEXI2DVI_1 = 
AM_V_TEXI2PDF = $(am__v_TEXI2PDF_@AM_V@)
am__v_TEXI2PDF_ = $(am__v_TEXI2PDF_@AM_DEFAULT_V@)
am__v_TEXI2PDF_0 = @echo "  TEXI2PDF" $@;
am__v_TEXI2PDF_1 = 
AM_V_texinfo = $(am__v_texinfo_@AM_V@)
am__v_texinfo_ = $(am__v_texinfo_@AM_DEFAULT_V@)
am__v_texinfo_0 = -q
am__v_texinfo_1 = 
AM_V_texidevnull = $(am__v_texidevnull_@AM_V@)
am__v_texidevnull_ = $(am__v_texidevnull_@AM_DEFAULT_V@)
am__v_texidevnull_0 = > /dev/null
am__v_texidevnull_1 = 
INFO_DEPS = $(srcdir)/optionmatrix.info
am__TEXINFO_TEX_DIR = $(srcdir)
DVIS = optionmatrix.dvi
PDFS = optionmatrix.pdf
PSS = optionmatrix.ps
HTMLS = optionmatrix.html
TEXINFOS = optionmatrix.texi
TEXI2DVI = texi2dvi
TEXI2PDF = $(TEXI2DVI) --pdf --batch
MAKEINFOHTML = $(MAKEINFO) --html
AM_MAKEINFOHTMLFLAGS = $(AM_MAKEINFOFLAGS)
DVIPS = dvips
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__installdirs = "$(DESTDIR)$(infodir)"
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(optionmatrix_TEXINFOS) $(srcdir)/Makefile.in \
	README mdate-sh texinfo.tex
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
A2X = @A2X@
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
ASPELL = @ASPELL@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CSCOPE = @CSCOPE@
CTAGS = @CTAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DBLATEX = @DBLATEX@
DBTOEPUB = @DBTOEPUB@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DICTION = @DICTION@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
ETAGS = @ETAGS@
EXEEXT = @EXEEXT@
GTK_CFLAGS = @GTK_CFLAGS@
GTK_LIBS = @GTK_LIBS@
HELP2MAN = @HELP2MAN@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LINKCHECKER = @LINKCHECKER@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MAKEINFO_INSTALLED = @MAKEINFO_INSTALLED@
MKDIR_P = @MKDIR_P@
MOGRIFY = @MOGRIFY@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
QUANTLIB = @QUANTLIB@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SOURCEHIGHLIGHT = @SOURCEHIGHLIGHT@
STRIP = @STRIP@
STYLE = @STYLE@
TEXI2ANY = @TEXI2ANY@
VERSION = @VERSION@
XMLTO = @XMLTO@
ZIP = @ZIP@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
info_TEXINFOS = optionmatrix.texi
optionmatrix_TEXINFOS = optionmatrix.texi\
	version.texi\
	fdl.texi\
	epsf.tex

CLEANFILES = optionmatrix.dvi
TEXTFILES = images/ConsoleChain.txt\
	images/ConsoleSelect.txt\
	images/ConsoleFormat.txt\
	images/ConsoleWelcome.txt\
	images/SleepDelay.txt\
	images/Calendar.txt\
	images/CouponEditor.txt\
	images/DateEngine.txt\
	images/OptionMatrixCalendarDated.txt\
	images/OptionMatrixSpreads.txt\
	images/OptionMatrix.txt\
	images/Time.txt\
	images/PriceInterestStandard.txt\
	images/StrikesDrop.txt\
	images/Strikes.txt\
	images/StrikeDropDownAndAdjuster.txt\
	images/ModelDropDownOpen.txt\
	images/CNDDrop.txt\
	images/CNDDropDown.txt\
	images/Greeks.txt\
	images/UseDateEngine.txt\
	images/DisplayFormats.txt\
	images/MonthsToStrike.txt\
	images/MonthToStrikes.txt\
	images/MonthsAcross.txt\
	images/3Calls3Puts.txt\
	images/CycleDropOpen.txt\
	images/DateEngineProperties.txt\
	images/LegControls.txt\
	images/CalendarSpread.txt\
	images/SpreadLegs.txt\
	images/PrefsSettings.txt\
	images/ModelsList.txt\
	images/Precision.txt\
	images/DateEngineSelected.txt\
	images/CycleClosed.txt\
	images/RealTime.txt\
	images/SpreadCheckbox.txt\
	images/SpreadsCCPPCPPC.txt\
	images/ConsoleCategories.txt\
	images/ConsoleInputs.txt\
	images/OptionMatrixWin1.txt\
	images/Leg1.txt\
	images/Leg1Leg2.txt\
	images/ModelByAuthor.txt\
	images/CalendarButton.txt\
	images/CUSTInput.txt\
	images/MonthAdjuster.txt\
	images/Export.txt\
	images/10.txt\
	images/11.txt\
	images/1.txt\
	images/2.txt\
	images/3.txt\
	images/4.txt\
	images/5.txt\
	images/6.txt\
	images/7.txt\
	images/8.txt\
	images/9.txt

EQN_IMAGES = images/ConsoleChain.png\
	images/ConsoleSelect.png\
	images/ConsoleFormat.png\
	images/ConsoleWelcome.png\
	images/SleepDelay.png\
	images/CouponEditor.png\
	images/DateEngine.png\
	images/OptionMatrixCalendarDated.png\
	images/Calendar.png\
	images/OptionMatrix.png\
	images/OptionMatrixSpreads.png\
	images/3Calls3Puts.png\
	images/CalendarSpread.png\
	images/CNDDropDown.png\
	images/CNDDrop.png\
	images/CycleDropOpen.png\
	images/DateEngineProperties.png\
	images/DisplayFormats.png\
	images/Greeks.png\
	images/LegControls.png\
	images/ModelDropDownOpen.png\
	images/ModelsList.png\
	images/MonthsAcross.png\
	images/MonthsToStrike.png\
	images/MonthToStrikes.png\
	images/Precision.png\
	images/PrefsSettings.png\
	images/PriceInterestStandard.png\
	images/SpreadLegs.png\
	images/StrikeDropDownAndAdjuster.png\
	images/StrikesDrop.png\
	images/Strikes.png\
	images/Time.png\
	images/UseDateEngine.png\
	images/DateEngineSelected.png\
	images/CycleClosed.png\
	images/RealTime.png\
	images/SpreadCheckbox.png\
	images/SpreadsCCPPCPPC.png\
	images/ConsoleCategories.png\
	images/ConsoleInputs.png\
	images/OptionMatrixWin1.png\
	images/download.png\
	images/Leg1.png\
	images/Leg1Leg2.png\
	images/ModelByAuthor.png\
	images/CalendarButton.png\
	images/CUSTInput.png\
	images/MonthAdjuster.png\
	images/Export.png\
	images/10.png\
	images/11.png\
	images/1.png\
	images/2.png\
	images/3.png\
	images/4.png\
	images/5.png\
	images/6.png\
	images/7.png\
	images/8.png\
	images/9.png\
	images/icon_optionmatrix128x128.png\
	images/icon_optionmatrix256x256.png\
	images/icon_optionmatrix32x32.png\
	images/icon_optionmatrix48x48.png\
	images/icon_optionmatrix64x64.png

ICO_IMAGES = \
	images/favicon.ico

EXTRA_DIST = $(EQN_IMAGES) $(TEXTFILES) $(ICO_IMAGES) README html/images/README optionmatrix.pdf optionmatrix.info
all: all-am

.SUFFIXES:
.SUFFIXES: .dvi .html .info .pdf .ps .texi
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu doc/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu doc/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

.texi.info:
	$(AM_V_MAKEINFO)restore=: && backupdir="$(am__leading_dot)am$$$$" && \
	am__cwd=`pwd` && $(am__cd) $(srcdir) && \
	rm -rf $$backupdir && mkdir $$backupdir && \
	if ($(MAKEINFO) --version) >/dev/null 2>&1; then \
	  for f in $@ $@-[0-9] $@-[0-9][0-9] $(@:.info=).i[0-9] $(@:.info=).i[0-9][0-9]; do \
	    if test -f $$f; then mv $$f $$backupdir; restore=mv; else :; fi; \
	  done; \
	else :; fi && \
	cd "$$am__cwd"; \
	if $(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
	 -o $@ $<; \
	then \
	  rc=0; \
	  $(am__cd) $(srcdir); \
	else \
	  rc=$$?; \
	  $(am__cd) $(srcdir) && \
	  $$restore $$backupdir/* `echo "./$@" | sed 's|[^/]*$$||'`; \
	fi; \
	rm -rf $$backupdir; exit $$rc

.texi.dvi:
	$(AM_V_TEXI2DVI)TEXINPUTS="$(am__TEXINFO_TEX_DIR)$(PATH_SEPARATOR)$$TEXINPUTS" \
	MAKEINFO='$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir)' \
	$(TEXI2DVI) $(AM_V_texinfo) --build-dir=$(@:.dvi=.t2d) -o $@ $(AM_V_texidevnull) \
	$<

.texi.pdf:
	$(AM_V_TEXI2PDF)TEXINPUTS="$(am__TEXINFO_TEX_DIR)$(PATH_SEPARATOR)$$TEXINPUTS" \
	MAKEINFO='$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir)' \
	$(TEXI2PDF) $(AM_V_texinfo) --build-dir=$(@:.pdf=.t2p) -o $@ $(AM_V_texidevnull) \
	$<

.texi.html:
	$(AM_V_MAKEINFO)rm -rf $(@:.html=.htp)
	$(AM_V_at)if $(MAKEINFOHTML) $(AM_MAKEINFOHTMLFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
	 -o $(@:.html=.htp) $<; \
	then \
	  rm -rf $@ && mv $(@:.html=.htp) $@; \
	else \
	  rm -rf $(@:.html=.htp); exit 1; \
	fi
$(srcdir)/optionmatrix.info: optionmatrix.texi $(srcdir)/version.texi $(optionmatrix_TEXINFOS)
optionmatrix.dvi: optionmatrix.texi $(srcdir)/version.texi $(optionmatrix_TEXINFOS)
optionmatrix.pdf: optionmatrix.texi $(srcdir)/version.texi $(optionmatrix_TEXINFOS)
optionmatrix.html: optionmatrix.texi $(srcdir)/version.texi $(optionmatrix_TEXINFOS)
$(srcdir)/version.texi: @MAINTAINER_MODE_TRUE@ $(srcdir)/stamp-vti
$(srcdir)/stamp-vti: optionmatrix.texi $(top_srcdir)/configure
	@(dir=.; test -f ./optionmatrix.texi || dir=$(srcdir); \
	set `$(SHELL) $(srcdir)/mdate-sh $$dir/optionmatrix.texi`; \
	echo "@set UPDATED $$1 $$2 $$3"; \
	echo "@set UPDATED-MONTH $$2 $$3"; \
	echo "@set EDITION $(VERSION)"; \
	echo "@set VERSION $(VERSION)") > vti.tmp$$$$ && \
	(cmp -s vti.tmp$$$$ $(srcdir)/version.texi \
	  || (echo "Updating $(srcdir)/version.texi" && \
	      cp vti.tmp$$$$ $(srcdir)/version.texi.tmp$$$$ && \
	      mv $(srcdir)/version.texi.tmp$$$$ $(srcdir)/version.texi)) && \
	rm -f vti.tmp$$$$ $(srcdir)/version.texi.$$$$
	@cp $(srcdir)/version.texi $@

mostlyclean-vti:
	-rm -f vti.tmp* $(srcdir)/version.texi.tmp*

maintainer-clean-vti:
@MAINTAINER_MODE_TRUE@	-rm -f $(srcdir)/stamp-vti $(srcdir)/version.texi
.dvi.ps:
	$(AM_V_DVIPS)TEXINPUTS="$(am__TEXINFO_TEX_DIR)$(PATH_SEPARATOR)$$TEXINPUTS" \
	$(DVIPS) $(AM_V_texinfo) -o $@ $<

uninstall-dvi-am:
	@$(NORMAL_UNINSTALL)
	@list='$(DVIS)'; test -n "$(dvidir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(dvidir)/$$f'"; \
	  rm -f "$(DESTDIR)$(dvidir)/$$f"; \
	done

uninstall-html-am:
	@$(NORMAL_UNINSTALL)
	@list='$(HTMLS)'; test -n "$(htmldir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " rm -rf '$(DESTDIR)$(htmldir)/$$f'"; \
	  rm -rf "$(DESTDIR)$(htmldir)/$$f"; \
	done

uninstall-info-am:
	@$(PRE_UNINSTALL)
	@if test -d '$(DESTDIR)$(infodir)' && $(am__can_run_installinfo); then \
	  list='$(INFO_DEPS)'; \
	  for file in $$list; do \
	    relfile=`echo "$$file" | sed 's|^.*/||'`; \
	    echo " install-info --info-dir='$(DESTDIR)$(infodir)' --remove '$(DESTDIR)$(infodir)/$$relfile'"; \
	    if install-info --info-dir="$(DESTDIR)$(infodir)" --remove "$(DESTDIR)$(infodir)/$$relfile"; \
	    then :; else test ! -f "$(DESTDIR)$(infodir)/$$relfile" || exit 1; fi; \
	  done; \
	else :; fi
	@$(NORMAL_UNINSTALL)
	@list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  relfile=`echo "$$file" | sed 's|^.*/||'`; \
	  relfile_i=`echo "$$relfile" | sed 's|\.info$$||;s|$$|.i|'`; \
	  (if test -d "$(DESTDIR)$(infodir)" && cd "$(DESTDIR)$(infodir)"; then \
	     echo " cd '$(DESTDIR)$(infodir)' && rm -f $$relfile $$relfile-[0-9] $$relfile-[0-9][0-9] $$relfile_i[0-9] $$relfile_i[0-9][0-9]"; \
	     rm -f $$relfile $$relfile-[0-9] $$relfile-[0-9][0-9] $$relfile_i[0-9] $$relfile_i[0-9][0-9]; \
	   else :; fi); \
	done

uninstall-pdf-am:
	@$(NORMAL_UNINSTALL)
	@list='$(PDFS)'; test -n "$(pdfdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(pdfdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(pdfdir)/$$f"; \
	done

uninstall-ps-am:
	@$(NORMAL_UNINSTALL)
	@list='$(PSS)'; test -n "$(psdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(psdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(psdir)/$$f"; \
	done

dist-info: $(INFO_DEPS)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	list='$(INFO_DEPS)'; \
	for base in $$list; do \
	  case $$base in \
	    $(srcdir)/*) base=`echo "$$base" | sed "s|^$$srcdirstrip/||"`;; \
	  esac; \
	  if test -f $$base; then d=.; else d=$(srcdir); fi; \
	  base_i=`echo "$$base" | sed 's|\.info$$||;s|$$|.i|'`; \
	  for file in $$d/$$base $$d/$$base-[0-9] $$d/$$base-[0-9][0-9] $$d/$$base_i[0-9] $$d/$$base_i[0-9][0-9]; do \
	    if test -f $$file; then \
	      relfile=`expr "$$file" : "$$d/\(.*\)"`; \
	      test -f "$(distdir)/$$relfile" || \
		cp -p $$file "$(distdir)/$$relfile"; \
	    else :; fi; \
	  done; \
	done

mostlyclean-aminfo:
	-rm -rf optionmatrix.t2d optionmatrix.t2p

clean-aminfo:
	-test -z "optionmatrix.dvi optionmatrix.pdf optionmatrix.ps optionmatrix.html" \
	|| rm -rf optionmatrix.dvi optionmatrix.pdf optionmatrix.ps optionmatrix.html

maintainer-clean-aminfo:
	@list='$(INFO_DEPS)'; for i in $$list; do \
	  i_i=`echo "$$i" | sed 's|\.info$$||;s|$$|.i|'`; \
	  echo " rm -f $$i $$i-[0-9] $$i-[0-9][0-9] $$i_i[0-9] $$i_i[0-9][0-9]"; \
	  rm -f $$i $$i-[0-9] $$i-[0-9][0-9] $$i_i[0-9] $$i_i[0-9][0-9]; \
	done
tags TAGS:

ctags CTAGS:

cscope cscopelist:

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-info
check-am: all-am
check: check-am
all-am: Makefile $(INFO_DEPS)
installdirs:
	for dir in "$(DESTDIR)$(infodir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-aminfo clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi-am: $(DVIS)

html-am: $(HTMLS)

info: info-am

info-am: $(INFO_DEPS)

install-data-am: install-info-am

install-dvi: install-dvi-am

install-dvi-am: $(DVIS)
	@$(NORMAL_INSTALL)
	@list='$(DVIS)'; test -n "$(dvidir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(dvidir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(dvidir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(dvidir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(dvidir)" || exit $$?; \
	done
install-exec-am:

install-html-am: $(HTMLS)
	@$(NORMAL_INSTALL)
	@list='$(HTMLS)'; list2=; test -n "$(htmldir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(htmldir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(htmldir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p" || test -d "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  $(am__strip_dir) \
	  d2=$$d$$p; \
	  if test -d "$$d2"; then \
	    echo " $(MKDIR_P) '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(MKDIR_P) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
	    echo " $(INSTALL_DATA) '$$d2'/* '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d2"/* "$(DESTDIR)$(htmldir)/$$f" || exit $$?; \
	  else \
	    list2="$$list2 $$d2"; \
	  fi; \
	done; \
	test -z "$$list2" || { echo "$$list2" | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(htmldir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(htmldir)" || exit $$?; \
	done; }
install-info-am: $(INFO_DEPS)
	@$(NORMAL_INSTALL)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	list='$(INFO_DEPS)'; test -n "$(infodir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(infodir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(infodir)" || exit 1; \
	fi; \
	for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	  esac; \
	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
	  file_i=`echo "$$file" | sed 's|\.info$$||;s|$$|.i|'`; \
	  for ifile in $$d/$$file $$d/$$file-[0-9] $$d/$$file-[0-9][0-9] \
	               $$d/$$file_i[0-9] $$d/$$file_i[0-9][0-9] ; do \
	    if test -f $$ifile; then \
	      echo "$$ifile"; \
	    else : ; fi; \
	  done; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(infodir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(infodir)" || exit $$?; done
	@$(POST_INSTALL)
	@if $(am__can_run_installinfo); then \
	  list='$(INFO_DEPS)'; test -n "$(infodir)" || list=; \
	  for file in $$list; do \
	    relfile=`echo "$$file" | sed 's|^.*/||'`; \
	    echo " install-info --info-dir='$(DESTDIR)$(infodir)' '$(DESTDIR)$(infodir)/$$relfile'";\
	    install-info --info-dir="$(DESTDIR)$(infodir)" "$(DESTDIR)$(infodir)/$$relfile" || :;\
	  done; \
	else : ; fi
install-man:

install-pdf: install-pdf-am

install-pdf-am: $(PDFS)
	@$(NORMAL_INSTALL)
	@list='$(PDFS)'; test -n "$(pdfdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pdfdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pdfdir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pdfdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pdfdir)" || exit $$?; done
install-ps: install-ps-am

install-ps-am: $(PSS)
	@$(NORMAL_INSTALL)
	@list='$(PSS)'; test -n "$(psdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(psdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(psdir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(psdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(psdir)" || exit $$?; done
installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-aminfo \
	maintainer-clean-generic maintainer-clean-local \
	maintainer-clean-vti

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-aminfo mostlyclean-generic mostlyclean-vti

pdf: pdf-am

pdf-am: $(PDFS)

ps: ps-am

ps-am: $(PSS)

uninstall-am: uninstall-dvi-am uninstall-html-am uninstall-info-am \
	uninstall-pdf-am uninstall-ps-am

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-aminfo clean-generic \
	cscopelist-am ctags-am dist-info distclean distclean-generic \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-aminfo \
	maintainer-clean-generic maintainer-clean-local \
	maintainer-clean-vti mostlyclean mostlyclean-aminfo \
	mostlyclean-generic mostlyclean-vti pdf pdf-am ps ps-am \
	tags-am uninstall uninstall-am uninstall-dvi-am \
	uninstall-html-am uninstall-info-am uninstall-pdf-am \
	uninstall-ps-am

.PRECIOUS: Makefile


# Do nothing for 'make dvi'
# Try 'make png2eps ; make ps' for DVI and PS
dvi:

# Try "sudo apt-get install imagemagick" if missing ImageMagick mogrify
# under a GNU/Linux system using apt-get
.PHONY: png2eps
png2eps:
	if test -z '$(MOGRIFY)'; then \
		echo ; \
		echo ; \
		echo "mogrify not installed."; \
		echo ; \
		echo ; \
	else \
		mogrify -format eps -- images/*.png; \
		echo ; \
		echo See EPS images in images/; \
		echo ; \
	fi; 

.PHONY: clean
clean:
	-rm -f images/*.eps
	-rm -f html/images/*.png
	-rm -f html/images/*.ico
	-rm -f html/*.gz
	-rm -f html/*.html
	-rm -f html/optionmatrix.zip
	-rm -f optionmatrix.xml
	-rm -f optionmatrix.aux optionmatrix.ky optionmatrix.cp
	-rm -f optionmatrix.log optionmatrix.cps optionmatrix.op
	-rm -f optionmatrix.fn optionmatrix.pg optionmatrix.hhc
	-rm -f optionmatrix.hhk optionmatrix.toc optionmatrix.hhp
	-rm -f optionmatrix.tp optionmatrix.vr optionmatrix.epub
	-rm -f optionmatrix.dbk optionmatrix.txt
	-rm -f optionmatrix.dvi optionmatrix.ps
	-rm -f optionmatrix.chm optionmatrix.chw optionmatrix.xml
	-rm -f optionmatrix.htmlhelp/images/*
	-rm -f optionmatrix.htmlhelp/*.css
	-rm -f optionmatrix.htmlhelp/*.html
	-rm -f linkchecker-out.html
	-rm -f optionmatrix.texi2
	-rm -rf html/source_html/*

install-info:
	install-info --info-dir="$(DESTDIR)$(infodir)/optionmatrix" \
		"$(DESTDIR)$(infodir)/optionmatrix.info";

install-html: $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	$(MKDIR_P) $(DESTDIR)${htmldir}/optionmatrix.html/images
	for i in $(EQN_IMAGES); do cp -f ${srcdir}/$$i $(DESTDIR)${htmldir}/optionmatrix.html/images ; done
	if (test -n '$(MAKEINFO_INSTALLED)' && test -z '$(TEXI2ANY)'); then \
		echo "texi2any not installed. Using makeinfo"; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --html --number-sections -o $(DESTDIR)${htmldir}/optionmatrix.html $(abs_top_srcdir)/doc/optionmatrix.texi -I $(abs_top_srcdir)/doc/images/; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --html --no-split --no-headers -o $(DESTDIR)${htmldir}/optionmatrix.html/indexNoSplit.html $(abs_top_srcdir)/doc/optionmatrix.texi -I $(abs_top_srcdir)/doc/images/; \
	fi;
	if test -n '$(TEXI2ANY)'; then \
		echo "texi2any installed"; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable TOP_NODE_UP_URL=https://github.com --html --number-sections -o $(DESTDIR)${htmldir}/optionmatrix.html $(abs_top_srcdir)/doc/optionmatrix.texi -I $(abs_top_srcdir)/doc/images/; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable TOP_NODE_UP_URL=https://github.com/ --html --no-split --no-headers -o $(DESTDIR)${htmldir}/optionmatrix.html/indexNoSplit.html $(abs_top_srcdir)/doc/optionmatrix.texi -I $(abs_top_srcdir)/doc/images/; \
	fi; 
	if ( test -z '$(TEXI2ANY)' && test -z '$(MAKEINFO_INSTALLED)' ); then \
		echo "makeinfo or texi2any needs to be installed to create HTML documentation."; \
	fi;

# Create zipped HTML document file
.PHONY: zip
zip: html
	if test -z '$(ZIP)'; then \
		echo ; \
		echo ; \
		echo "zip not installed."; \
		echo ; \
		echo ; \
	else \
		zip -r html/optionmatrix.zip html/*; \
		echo ; \
		echo "See file html/optionmatrix.zip"; \
		echo ; \
	fi;

.PHONY: text
text: check_makeinfo_texi2any
	$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --no-headers $(DESTDIR)optionmatrix.texi -o $(DESTDIR)optionmatrix.txt
	@echo
	@echo "See file optionmatrix.txt"
	@echo

.PHONY: check_texi2any
check_texi2any:
	if test -n '$(TEXI2ANY)'; then \
		echo "texi2any is installed."; \
	fi;

.PHONY: check_makeinfo
check_makeinfo:
	if test -n '$(MAKEINFO_INSTALLED)'; then \
		echo "makeinfo is installed."; \
	fi;

.PHONY: check_makeinfo_texi2any
check_makeinfo_texi2any:
	@echo "TEXI2ANY = " $(TEXI2ANY) " MAKEINFO_INSTALLED = " $(MAKEINFO_INSTALLED)
	if ( (test -z '$(TEXI2ANY)') && (test -z '$(MAKEINFO_INSTALLED)') ); then \
		echo "makeinfo or texi2any needs to be installed."; \
		exit 1; \
	fi;

# Create HTML documentation
.PHONY: html
html: $(optionmatrix__TEXINFOS) $(EQN_IMAGES) check_makeinfo_texi2any
	if test -z '$(TEXI2ANY)'; then \
		echo "texi2any not installed. Using makeinfo"; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --html --number-sections -o html $(DESTDIR)optionmatrix.texi; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --html --no-split --no-headers -o html/indexNoSplit.html $(DESTDIR)optionmatrix.texi; \
	else \
		echo "texi2any installed"; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable 'FRAMES=TRUE' --set-customization-variable TOP_NODE_UP_URL=https://github.com --set-customization-variable 'AFTER_BODY_OPEN=<a href="http://anthonybradford.github.io/optionmatrix/optionmatrix.pdf">OptionMatrix PDF manual</a>' --set-customization-variable 'PRE_BODY_CLOSE=<a href="http://anthonybradford.github.io/optionmatrix/optionmatrix.pdf">OptionMatrix PDF manual</a>' --html --number-sections -o html $(DESTDIR)optionmatrix.texi; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable TOP_NODE_UP_URL=https://github.com --set-customization-variable 'AFTER_BODY_OPEN=<a href="http://anthonybradford.com/om/doc/optionmatrix.pdf">OptionMatrix PDF manual</a>' --set-customization-variable 'PRE_BODY_CLOSE=<a href="http://anthonybradford.com/om/doc/optionmatrix.pdf">OptionMatrix PDF manual</a>' --html --no-split --no-headers -o html/indexNoSplit.html $(DESTDIR)optionmatrix.texi; \
	fi;
	for i in $(EQN_IMAGES); do cp -f ${srcdir}/$$i $(DESTDIR)html/images ; done
	@echo
	@echo "See directory html/"
	@echo

# Create Frames HTML documentation
.PHONY: frames
frames: check_makeinfo_texi2any
	for i in $(EQN_IMAGES); do cp -f ${srcdir}/$$i $(DESTDIR)html/images ; done
	if test -z '$(TEXI2ANY)'; then \
		echo ; \
		echo "texi2any needed for Frames HTML"; \
		echo ; \
	else \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable 'FRAMES=TRUE' --set-customization-variable TOP_NODE_UP_URL=https://github.com --set-customization-variable 'AFTER_BODY_OPEN=<a href="http://anthonybradford.github.io/optionmatrix/optionmatrix.pdf">OptionMatrix PDF manual</a>' --set-customization-variable 'PRE_BODY_CLOSE=<a href="http://anthonybradford.github.io/optionmatrix/optionmatrix.pdf">OptionMatrix PDF manual</a>' --html --number-sections -o html $(DESTDIR)optionmatrix.texi; \
	echo ; \
	echo "See file html/optionmatrix_frame.html"; \
	echo ; \
	fi;

.PHONY: docbook
docbook: check_makeinfo_texi2any $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	sed 's/@\*/@\*\n@ifdocbook\n\n@end ifdocbook/g' $(DESTDIR)optionmatrix.texi >$(DESTDIR)optionmatrix.texi2
	$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
		--docbook $(DESTDIR)optionmatrix.texi2 -o $(DESTDIR)optionmatrix.dbk
	rm $(DESTDIR)optionmatrix.texi2
	@echo
	@echo "See file optionmatrix.dbk"
	@echo

.PHONY: pdf2
pdf2: docbook
	if test -z '$(DBLATEX)'; then \
		echo ; \
		echo ; \
		echo "dblatex not installed."; \
		echo ; \
		echo ; \
	else \
		dblatex --pdf optionmatrix.dbk -o optionmatrix.pdf; \
		echo ; \
		echo "Alternative form of PDF."; \
		echo "See optionmatrix.pdf"; \
		echo ; \
	fi;

.PHONY: html2
html2: docbook
	for i in $(EQN_IMAGES); do cp -f ${srcdir}/$$i $(DESTDIR)html/images ; done
	if test -z '$(XMLTO)'; then \
		echo ; \
		echo ; \
		echo "xmlto not installed."; \
		echo ; \
		echo ; \
	else \
		xmlto --skip-validation html optionmatrix.dbk -o html; \
		echo ; \
		echo "Alternative form of HTML."; \
		echo "See directory html/"; \
		echo ; \
	fi;

.PHONY: xml
xml: check_makeinfo_texi2any $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
		--xml $(DESTDIR)optionmatrix.texi -o $(DESTDIR)optionmatrix.xml
	@echo
	@echo "See file optionmatrix.xml"
	@echo

# Create EPUB3 document
.PHONY: epub
epub: check_makeinfo_texi2any $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
		--epub3 $(DESTDIR)optionmatrix.texi -o $(DESTDIR)optionmatrix.epub
	@echo
	@echo "See file optionmatrix.epub"
	@echo

# Create EPUB document via dbtoepub
# Install dbtoepub with
# sudo apt-get install dbtoepub
.PHONY: dbtoepub
dbtoepub: docbook
	if test -z '$(DBTOEPUB)'; then \
		echo ; \
		echo ; \
		echo "dbtoepub not installed."; \
		echo ; \
		echo ; \
	else \
		dbtoepub $(DESTDIR)optionmatrix.dbk; \
		mv $(DESTDIR)optionmatrix.dbk.epub $(DESTDIR)optionmatrix.epub; \
		echo ; \
		echo "See file optionmatrix.epub"; \
		echo ; \
	fi;

# Create HTML source-highlight
.PHONY: source_html
source_html:
	if test -z '$(SOURCEHIGHLIGHT)'; then \
		echo ; \
		echo ; \
		echo "source-highlight not installed."; \
		echo ; \
		echo ; \
	else \
		$(MKDIR_P) html/source_html; \
		rm -r html/source_html/*; \
		cp -r $(top_srcdir)/* html/source_html; \
		cp $(top_srcdir)/doc/* html/source_html/doc; \
		(cd html/source_html ; find . -type f -exec source-highlight {} \; ); \
		(cd html/source_html ; find . -type f -name "*.c" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.cpp" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.cc" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.h" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.o" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.a" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.am" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.in" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.ac" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.gz" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.texi" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.tex" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "*.log" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "Makefile" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -name "ChangeLog" -exec rm -f {} \; ); \
		(cd html/source_html ; find . -type f -executable -exec rm -f {} \; ); \
		(cd html ; tar -czvf source_html.tar.gz source_html ); \
		echo ; \
		echo "See html/source_html"; \
		echo "See html/source_html.tar.gz"; \
		echo ; \
	fi;

# Run spelling checker on .texi content
# Install aspell with
# sudo apt-get install aspell
.PHONY: spelling
spelling:
	if test -z '$(ASPELL)'; then \
		echo ; \
		echo ; \
		echo "aspell not installed."; \
		echo ; \
		echo ; \
	else \
		aspell --mode=texinfo -c $(DESTDIR)optionmatrix.texi;\
	fi;

# Check diction. See 'man diction'
# Install diction with
# sudo apt-get install diction
.PHONY: diction
diction: check_makeinfo_texi2any
	if test -z '$(DICTION)'; then \
		echo ; \
		echo ; \
		echo "diction not installed."; \
		echo ; \
		echo ; \
	else \
		$(MAKEINFO) --no-headers $(DESTDIR)optionmatrix.texi -o $(DESTDIR)optionmatrix.txt; \
		diction < $(DESTDIR)optionmatrix.txt; \
	fi;

# Check style. See 'man style'
# Install style with
# sudo apt-get install diction
.PHONY: style
style: check_makeinfo_texi2any
	if test -z '$(STYLE)'; then \
		echo ; \
		echo ; \
		echo "style not installed."; \
		echo ; \
		echo ; \
	else \
		$(MAKEINFO) --no-headers $(DESTDIR)optionmatrix.texi -o $(DESTDIR)optionmatrix.txt; \
		style < $(DESTDIR)optionmatrix.txt; \
	fi;

# Check for bad HTML links
# To install linkchecker do the following
# sudo apt-get install linkchecker
# linkchecker will only work if MAKEINFO uses texi2any
.PHONY: linkchecker
linkchecker: check_makeinfo_texi2any $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	for i in $(EQN_IMAGES); do cp -f ${srcdir}/$$i $(DESTDIR)html/images ; done
	if test -z '$(LINKCHECKER)'; then \
		echo ; \
		echo ; \
		echo "linkchecker not installed."; \
		echo ; \
		echo ; \
	else \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --html --number-sections -o html $(DESTDIR)optionmatrix.texi; \
		$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) --set-customization-variable TOP_NODE_UP_URL=https://github.com --html --no-split --no-headers -o html/indexNoSplit.html $(DESTDIR)optionmatrix.texi; \
		linkchecker -Fhtml -o none html/index.html; \
		echo ; \
		echo "See linkchecker-out.html"; \
		echo ; \
	fi;

# Build Microsoft HTML Helper File (.chm)
# The HTML Helper only runs under Windows
.PHONY: htmlhelp
htmlhelp: check_makeinfo_texi2any $(optionmatrix__TEXINFOS) $(EQN_IMAGES)
	$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) \
		--docbook $(DESTDIR)optionmatrix.texi
	if test -z '$(A2X)'; then \
		echo ; \
		echo ; \
		echo "a2x not installed."; \
		echo ; \
		echo ; \
	else \
		a2x -v -f htmlhelp --icons -D . optionmatrix.xml; \
		echo ; \
		echo ; \
		echo ; \
		echo "Under Cygwin or MingGW download the Microsoft HTML Help Workshop."; \
		echo "copy hhc.exe to this directory."; \
		echo "run \"./hhc.exe optionmatrix.hhp\" to generate Microsoft HTML Helper for Windows."; \
		echo "The name of the created file will be \"optionmatrix.chm\". Double click to run"; \
		echo "this file under Windows."; \
		echo ; \
		echo ; \
		echo ; \
	fi;

maintainer-clean-local:
	-rm -rf html/images/*
	-rm -rf html/*.html

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
